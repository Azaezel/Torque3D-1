function Prototyping::onCreate(%this)
{
}

function Prototyping::onDestroy(%this)
{
}

//This is called when the server is initially set up by the game application
function Prototyping::initServer(%this)
{
}

//This is called when the server is created for an actual game/map to be played
function Prototyping::onCreateGameServer(%this)
{
    //These are common managed data files. For any datablock-based stuff that gets generated by the editors
    //(that doesn't have a specific associated file, like data for a player class) will go into these.
    //So we'll register them now if they exist.
    if(isFile("./scripts/managedData/managedDatablocks." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedDatablocks");
    if(isFile("./scripts/managedData/managedForestItemData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedForestItemData");
    if(isFile("./scripts/managedData/managedForestBrushData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedForestBrushData");
    if(isFile("./scripts/managedData/managedParticleEmitterData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedParticleEmitterData");
    if(isFile("./scripts/managedData/managedParticleData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedParticleData");
}

//This is called when the server is shut down due to the game/map being exited
function Prototyping::onDestroyGameServer(%this)
{
}

//This is called when the client is initially set up by the game application
function Prototyping::initClient(%this)
{
}

//This is called when a client connects to a server
function Prototyping::onCreateClientConnection(%this)
{
}

//This is called when a client disconnects from a server
function Prototyping::onDestroyClientConnection(%this)
{
}
    
function expandRooms(%nodeObj, %count)
{
    %count--;
    if (%count <=0) return;
    %frameMesh = %nodeObj.findObjectByInternalName("frame");
    echo(%frameMesh.ShapeAsset);
    for (%i=1;%i<4;%i++)
    {
        if (%frameMesh.hasNode("exit"@ %i))
        {
            %exitTrans = %frameMesh.getNodeTransform("exit"@ %i);
            %pos = getWords(%exitTrans,0,2);             
		    %rot  = getWords(%exitTrans,3,5) SPC mRadToDeg(getWord(%exitTrans,6));
		    %offset  = vectorScale(toEuler(%exitTrans),2);
            %newPos = vectorAdd(%pos,%offset);
            %okay = containerBoxEmpty("-1",%newPos,2,2,2,false);
            if (%okay)
            {
                if (%count >1)
                    %tilenum = getrandom(5);
                else
                    %tilenum = "block";
                    
                %mazNode = new Prefab()
                { 
                    fileName = "data/Prototyping/prefabs/tile"@ %tilenum @".prefab";
                    position = %newPos;
                    rotation = %rot;
                };
                getScene(0).add(%mazNode);
                expandRooms(%mazNode, %count);
             }
        }
    }
    
}

function createMaze()
{
   %mazeStart = new Prefab() {
      fileName = "data/Prototyping/prefabs/tileStart.prefab";
   };
   getScene(0).add(%mazeStart);
   expandRooms(%mazeStart, 5);
}