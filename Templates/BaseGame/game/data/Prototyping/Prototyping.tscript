function Prototyping::onCreate(%this)
{
}

function Prototyping::onDestroy(%this)
{
}

//This is called when the server is initially set up by the game application
function Prototyping::initServer(%this)
{
}

//This is called when the server is created for an actual game/map to be played
function Prototyping::onCreateGameServer(%this)
{
    //These are common managed data files. For any datablock-based stuff that gets generated by the editors
    //(that doesn't have a specific associated file, like data for a player class) will go into these.
    //So we'll register them now if they exist.
    if(isFile("./scripts/managedData/managedDatablocks." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedDatablocks");
    if(isFile("./scripts/managedData/managedForestItemData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedForestItemData");
    if(isFile("./scripts/managedData/managedForestBrushData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedForestBrushData");
    if(isFile("./scripts/managedData/managedParticleEmitterData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedParticleEmitterData");
    if(isFile("./scripts/managedData/managedParticleData." @ $TorqueScriptFileExtension))
        %this.registerDatablock("./scripts/managedData/managedParticleData");
}

//This is called when the server is shut down due to the game/map being exited
function Prototyping::onDestroyGameServer(%this)
{
}

//This is called when the client is initially set up by the game application
function Prototyping::initClient(%this)
{
}

//This is called when a client connects to a server
function Prototyping::onCreateClientConnection(%this)
{
}

//This is called when a client disconnects from a server
function Prototyping::onDestroyClientConnection(%this)
{
}

function testMatIO()
{
    %mat = new MatrixVec();
    %mat.dump();
    
    %pos = "0 0 0";
    %rot = "1 0 0 0";
    for (%i=0;%i<5;%i++)
    {
        %pos.z++;
        %mat.push(-1,%pos SPC %rot);
    }
    echo("test1 - translation");
    %mat.dumpVals();
    
    for (%i=0;%i<5;%i++)
    {
        echo("mat["@ %i @"]:"@ %mat.getTranform(%i));
        echo("pos["@ %i @"]:"@ %mat.getPosition(%i));
        echo("rot["@ %i @"]:"@ %mat.getRotation(%i));
    }    
    
    %mat2 = new MatrixVec();
    for (%i=0;%i<5;%i++)
    {
        %pos = "0 0 0";
        %rot = "1 0 0" SPC 360/5*%i;
        %mat2.push(-1,%pos SPC %rot);
    }   
    echo("test2 - rotation");
    %mat2.dumpVals();
    
    for (%i=0;%i<5;%i++)
    {
        echo("mat["@ %i @"]:"@ %mat2.getTranform(%i));
        echo("pos["@ %i @"]:"@ %mat2.getPosition(%i));
        echo("rot["@ %i @"]:"@ %mat2.getRotation(%i));
    }
}