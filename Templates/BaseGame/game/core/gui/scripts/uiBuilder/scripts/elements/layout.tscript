function UIBuilder::LayoutContainer(%pos, %ext)
{
   %container = new GuiContainer()
   {
      profile = ToolsGuiFrameSetProfile;
      class = UIBuilderLayout;
      position = %pos;
      extent = %ext;
      internalName = "layout";
      horizSizing = "width";
      vertSizing = "height";
   };

   UIBuilderStack.push_back(%container);
   
   %layoutTabbook = UIBuilder::TabBook();
   %layoutTabbook.class = UIBldrLayoutTabbook;
   %layoutTabbook.internalName = "LayoutTabbook";
   %layoutTabbook.allowReorder = true;
   
   //%baseCtrl.add(%container);
   
   return %container;
}

function UIBuilderLayout::setMainPanel(%this, %mainPanelCtrl)
{
   
}

function UIBuilderLayout::split(%this, %direction)
{
     
}

//==============================================================================
function UIBldrLayoutTabbook::onTabDraggedOut(%this, %tabObj)
{
   echo("UIBldrLayoutTabbook::onTabDraggedOut() - tab: " @ %tabObj);
   
   %tabText = %tabObj.text;
   %tabTextWidth = %tabObj.profile.getStringWidth(%tabText) + 30;
   
   if(!isObject(EditorDragAndDropLayer))
   {
      new GuiControl(EditorDragAndDropLayer)
      {
         position = "0 0";
         extent = Canvas.extent;
      };
      
      EditorDragAndDropLayer.highlightControl = new GuiPanel() {
          position = "0 0";
          extent = "20 20";
          profile = UIBuilderLayoutHighlightProfile; // Assume this is a predefined profile for highlighting.
          visible = false;
      };
      
      EditorDragAndDropLayer.add(EditorDragAndDropLayer.highlightControl);
   }
   
   %cursorpos = Canvas.getCursorPos();
   %xPos = getWord( %cursorpos, 0 );
   %yPos = getWord( %cursorpos, 1 );
   
   %tabRef = new GuiTextCtrl() {
      profile = GuiMenuTextProfile;
      text = %tabText;
      extent = %tabTextWidth SPC 30;
      tabRef = %tabObj;
   };
   
   // Create the drag control.
   %ctrl = new GuiDragAndDropControl()
   {
      canSaveDynamicFields    = "0";
      Profile                 = GuiMenuBackgroundProfile;
      HorizSizing             = "right";
      VertSizing              = "bottom";
      Position                = %xPos SPC %yPos;
      extent                  = %tabRef.extent;
      MinExtent               = "4 4";
      canSave                 = "1";
      Visible                 = "1";
      hovertime               = "1000";

      // Let the GuiDragAndDropControl delete itself on mouse-up.  When the drag is aborted,
      // this not only deletes the drag control but also our payload.
      deleteOnMouseUp         = true;
      
      useWholeCanvas = true;

      // To differentiate drags, use the namespace hierarchy to classify them.
      // This will allow a color swatch drag to tell itself apart from a file drag, for example.
      class                   = "GuiFormBuilderCustomLayoutDrop";
   };
   
   // Add the temporary color swatch to the drag control as the payload.
   %ctrl.add( %tabRef );
   
   
   
   // Start drag by adding the drag control to the canvas and then calling startDragging().
   //Canvas.getContent().add( %ctrl );
   EditorDragAndDropLayer.add(%ctrl);
   Canvas.pushDialog(EditorDragAndDropLayer);
   
   %ctrl.startDragging( 0, 0);
   
   Canvas.repaint();
}

function UIBuilderCustomLayoutDrop::onControlDragCancelled(%this)
{
   Canvas.popDialog(EditorDragAndDropLayer);
}

function UIBldrLayoutTabbook::onControlDragged(%this, %payload, %point)
{
   EditorDragAndDropLayer.highlightControl.position = %this.position;
   EditorDragAndDropLayer.highlightControl.extent = %this.extent.x SPC 20;
   EditorDragAndDropLayer.highlightControl.visible = true;
   
   return;
}

function UIBldrLayoutTabbook::onControlDropped(%this, %payload, %point)
{
   Canvas.popDialog(EditorDragAndDropLayer);
   
   %this.dock(%payload.tabRef, "tab");
}

function UIBldrLayoutTab::onControlDragged(%this, %payload, %point)
{
   %targetPos = %this.getGlobalPosition();
   
   echo("targetObj: " @ %this @ " targetPos: " @ %targetPos);

   %targetX = getWord(%targetPos, 0);
   %targetY = getWord(%targetPos, 1);
   %targetWidth = %this.extent.x;
   %targetHeight = %this.extent.y;

   // Calculate the 20% margin for each side.
   %marginWidth = %targetWidth * 0.2;
   %marginHeight = %targetHeight * 0.2;
   
   %mouseX = %point.x;
   %mouseY = %point.y;

   // Check if the mouse is within the target's bounds.
   if (%mouseX >= %targetX && %mouseX <= (%targetX + %targetWidth) &&
      %mouseY >= %targetY && %mouseY <= (%targetY + %targetHeight)) {
      // Determine the mouse position relative to the target's edges.
      %relativeX = %mouseX - %targetX;
      %relativeY = %mouseY - %targetY;

      // Initialize highlight position and size variables.
      %highlightX = %targetX;
      %highlightY = %targetY;
      %highlightWidth = %targetWidth;
      %highlightHeight = %targetHeight/2; // Default to top section height.

      // Check if within top 20% margin.
      if (%relativeY <= %marginHeight) {
          // Highlight the top area.
          %highlightY = %targetY;
          %payload.targetPosition = "top";
      }
      // Check if within bottom 20% margin.
      else if (%relativeY >= (%targetHeight - %marginHeight)) {
          // Highlight the bottom area.
          %highlightY = %targetY + (%targetHeight/2);
          %payload.targetPosition = "bottom";
      }
      // Check if within left 20% margin.
      else if (%relativeX <= %marginWidth) {
          // Highlight the left area, adjust width and height for vertical highlight.
          %highlightX = %targetX;
          %highlightWidth = %targetWidth/2;
          %highlightHeight = %targetHeight;
          %payload.targetPosition = "left";
      }
      // Check if within right 20% margin.
      else if (%relativeX >= (%targetWidth - %marginWidth)) {
          // Highlight the right area, adjust width and height for vertical highlight.
          %highlightX = %targetX + (%targetWidth/2);
          %highlightWidth = %targetWidth/2;
          %highlightHeight = %targetHeight;
          %payload.targetPosition = "right";
      }
      else {
          //get the parent tabbook to highlight it'll be converted to a tab
          %tabbook = %this.getParent();
          
          %tabbookPos = %tabbook.getGlobalPosition();
          
          %highlightX = %tabbookPos.x;
          %highlightY = %tabbookPos.y;
          
          %highlightWidth = %tabbook.extent.x;
          %highlightHeight = 20;
          %payload.targetPosition = "tab";
      }
      
      echo("target region: " @ %payload.targetPosition);

      EditorDragAndDropLayer.highlightControl.position = %highlightX SPC %highlightY;
      EditorDragAndDropLayer.highlightControl.extent = %highlightWidth SPC %highlightHeight;
      EditorDragAndDropLayer.highlightControl.visible = true;
   }
}

function UIBldrLayoutTab::onControlDropped(%this, %payload, %point)
{
   Canvas.popDialog(EditorDragAndDropLayer);
   
   %tabbook = %this.getParent();
   %tabbook.dock(%payload.tabRef, %payload.targetPosition);
}

function UIBldrLayoutTabbook::dock(%this, %tabObj, %position)
{
   %layout = %this.getParent();
   
   %tabOldParent = %tabObj.getParent();
      
   if(%position !$= "tab")
   {
      UIBuilder::Set(%layout);
         %orientation = (%position $= "top" || %position $= "bottom") ? "Horizontal" : "Vertical";
         %splitPoint = %layout.extent.x/2 SPC %layout.extent.y/2;
         
         echo("UIBldrLayoutTabbook::dock() - orientation: " @ %orientation);
         %split = UIBuilder::SplitContainer(%orientation, %splitPoint);
         
         echo("UIBldrLayoutTabbook::dock() - splitcontainer: " @ %split);
         UIBuilder::End();
      UIBuilder::End();
         
      %moveCurrentToPanel = "";
      %newBookPanel = "";
      
      switch$(%position)
      {
         case "left":
            %newBookPanel = %split-->Panel1;
            %moveCurrentToPanel = %split-->Panel2;
         case "right":
            %newBookPanel = %split-->Panel2;
            %moveCurrentToPanel = %split-->Panel1;
         case "top":
            %newBookPanel = %split-->Panel1;
            %moveCurrentToPanel = %split-->Panel2;
         case "bottom":
            %newBookPanel = %split-->Panel2;
            %moveCurrentToPanel = %split-->Panel1;
         default:
            error("UIBldrLayoutTabbook::dock() - invalid drop region");
      }
      
      echo("UIBldrLayoutTabbook::dock() - tab name: " @ %tabObj.text);
      echo("UIBldrLayoutTabbook::dock() - moveCurrentToPanel: " @ %moveCurrentToPanel.internalName);
      echo("UIBldrLayoutTabbook::dock() - newBookPanel: " @ %newBookPanel.internalName);
      
      UIBuilder::Set(%newBookPanel);
         %newBook = UIBuilder::TabBook(true);
         %newBook.class = UIBldrLayoutTabbook;
         %newBook.add(%tabObj);
         
         //%newBook.resize(0,0,%newBookPanel.extent.x,%newBookPanel.extent.y);
         %tabObj.resize(0,0,%newBook.extent.x,%newBook.extent.y);
         UIBuilder::End();
      UIBuilder::End();
      
      %moveCurrentToPanel.add(%this);
      %panelExt = %moveCurrentToPanel.extent;
      %this.resize(0,0,%panelExt.x,%panelExt.y);
      
      echo("UIBldrLayoutTabbook::dock() - currentBook ext: " @ %this.extent);
      echo("UIBldrLayoutTabbook::dock() - newBook ext: " @ %this.extent);
   }
   else
   {
      %this.add(%tabObj);
   }
   
   %tabOldParent.undock(%tabObj);
}

function UIBldrLayoutTabbook::undock(%this, %tabObj)
{
   //Now we update the original holder of our moved tab, and adjust layout stuffs as needed
   echo("tab old parent: " @ %this);
   if(%this.getCount() == 0)
   {
      echo("tabbook is out of tabs!");
      //we need to collapse it  
      %oldPanel = %this.getParent();
      %oldSplitCtrl = %oldPanel.getParent();

      echo("old layout ctrl: " @ %oldSplitCtrl);
      
      if(%oldSplitCtrl.getClassName() $= "GuiSplitContainer")
      {
         //we need to fold things up  
         echo("Collapse split containers!");
         %splitContainerParent = %oldSplitCtrl.getParent();
         
         echo("Split container parent: " @ %splitContainerParent);
         
         //get our sibling
         %objIdx = %oldSplitCtrl.getObjectIndex(%oldPanel);
         
         echo("   objIdx: " @ %objIdx);
         
         %siblingIndex = %objIdx == 0 ? 1 : 0;
         
         echo("   siblingIndex: " @ %siblingIndex);
         
         %otherPanel = %oldSplitCtrl.getObject(%siblingIndex);
         
         %otherTabbook = %otherPanel.getObject(0);
         %splitContainerParent.add(%otherTabbook);
         %otherTabbook.resize(0,0,%splitContainerParent.extent.x, %splitContainerParent.extent.y);
         %oldSplitCtrl.delete();
         %otherPanel.delete();
         %this.schedule(32, "delete");
      }
      else
      {
         %oldPanel.delete();  
         echo("deleted old panel");
      }
   }
}